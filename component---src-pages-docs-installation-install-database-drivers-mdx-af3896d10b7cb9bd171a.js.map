{"version":3,"sources":["webpack:///./src/pages/docs/installation/install-database-drivers.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"0PAMaA,G,UAAe,S,0OAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,4BADR,4BAGA,yMACA,+JACE,yBAAgB,CACd,WAAc,KADhB,kBADF,4CAME,gBAAO,CACL,KAAQ,4EACR,WAAc,KAFhB,oBANF,SAYE,gBAAO,CACL,KAAQ,gFACR,WAAc,KAFhB,wBAZF,sCAkBA,uGACA,sBAEE,iBAAQ,CACN,WAAc,MACb,gBAAO,CACN,KAAQ,oCACR,WAAc,MAFf,UAMH,iBAAQ,CACN,WAAc,MACb,gBAAO,CACN,KAAQ,qCACR,WAAc,MAFf,aAMH,iBAAQ,CACN,WAAc,MACb,gBAAO,CACN,KAAQ,mCACR,WAAc,MAFf,iBAML,yMAEA,iBAAQ,CACN,GAAM,mCADR,oCAGA,2LACA,gQACE,gBAAO,CACL,KAAQ,sDACR,WAAc,KAFhB,wBADF,sCAMA,qBAAG,gBAAO,CACN,KAAQ,sEACR,WAAc,KAFf,iBAAH,YAKE,gBAAO,CACL,KAAQ,qKACR,WAAc,KAFhB,4BALF,4EAWA,oWACA,wHACA,iBAAQ,CACN,GAAM,0BADR,2BAGA,qFACE,yBAAgB,CACd,WAAc,KADhB,kBADF,0BAKE,yBAAgB,CACd,WAAc,KADhB,2BALF,yGASA,+DACE,yBAAgB,CACd,WAAc,KADhB,kBADF,qKAKA,+BACE,yBAAgB,CACd,WAAc,KADhB,2BAGF,uBAAK,mBAAU,CACX,WAAc,OADb,qEAKL,+DACA,uBAAK,mBAAU,CACX,WAAc,OADb,4DAIL,+EACA,uBAAK,mBAAU,CACX,WAAc,OADb,sCAIL,gGACA,uBAAK,mBAAU,CACX,WAAc,OADb,wBAIL,iBAAQ,CACN,GAAM,sBADR,uBAGA,iHACA,iVACA,qDACA,uBAAK,mBAAU,CACX,WAAc,OADb,yEAIL,mDACA,uBAAK,mBAAU,CACX,WAAc,OADb,4FAIL,8KACA,8F,wOAKJH,EAAWI,gBAAiB","file":"component---src-pages-docs-installation-install-database-drivers-mdx-af3896d10b7cb9bd171a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/pkd/Desktop/incubator-superset-site/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"install-database-drivers\"\n    }}>{`Install Database Drivers`}</h2>\n    <p>{`Now that you have Superset up and running on your local machine, along with some example dashboards, let’s connect it to a database to run some queries and visualize some data.`}</p>\n    <p>{`Superset runs on Python and requires a database driver to be installed for each type of database. When setting up Superset locally via `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`docker-compose`}</inlineCode>\n      {`, the drivers and packages\ncontained in `}\n      <a {...{\n        \"href\": \"https://github.com/apache/incubator-superset/blob/master/requirements.txt\",\n        \"parentName\": \"p\"\n      }}>{`requirements.txt`}</a>\n      {` and\n`}\n      <a {...{\n        \"href\": \"https://github.com/apache/incubator-superset/blob/master/requirements-dev.txt\",\n        \"parentName\": \"p\"\n      }}>{`requirements-dev.txt`}</a>\n      {` will\nbe installed automatically.`}</p>\n    <p>{`At the time of this writing, drivers for the following databases are included:`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><a {...{\n          \"href\": \"https://pypi.org/project/pydruid/\",\n          \"parentName\": \"li\"\n        }}>{`Druid`}</a></li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><a {...{\n          \"href\": \"https://pypi.org/project/psycopg2/\",\n          \"parentName\": \"li\"\n        }}>{`Postgres`}</a></li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}><a {...{\n          \"href\": \"https://pypi.org/project/PyHive/\",\n          \"parentName\": \"li\"\n        }}>{`Presto/Hive`}</a></li>\n\n    </ul>\n    <p>{`If your database is one of these, you should be good to go! However, if you want to\nconnect to something different, like MySQL, you would need to install an additional driver.`}</p>\n    <h3 {...{\n      \"id\": \"1-determine-the-driver-you-need\"\n    }}>{`1. Determine the driver you need`}</h3>\n    <p>{`To figure out how to install the database driver of your choice, a good starting point is the Datasource Connector section of this documentation for instructions.`}</p>\n    <p>{`Superset interacts with the underlying databases using the provided SQL interface (often times through a SQLAlchemy library). If your database or data engine isn't on the list but a SQL interface exists, please file an issue on the `}\n      <a {...{\n        \"href\": \"https://github.com/apache/incubator-superset/issues\",\n        \"parentName\": \"p\"\n      }}>{`Superset GitHub repo`}</a>\n      {`, so we can work on supporting it.`}</p>\n    <p><a {...{\n        \"href\": \"https://stackoverflow.com/questions/tagged/apache-superset+superset\",\n        \"parentName\": \"p\"\n      }}>{`StackOverflow`}</a>\n      {` and the `}\n      <a {...{\n        \"href\": \"https://join.slack.com/t/apache-superset/shared_invite/enQtNDMxMDY5NjM4MDU0LWJmOTcxYjlhZTRhYmEyYTMzOWYxOWEwMjcwZDZiNWRiNDY2NDUwNzcwMDFhNzE1ZmMxZTZlZWY0ZTQ2MzMyNTU\",\n        \"parentName\": \"p\"\n      }}>{`Superset community Slack`}</a>\n      {`\nare great places to get help with connecting to databases in Superset.`}</p>\n    <p>{`In the end, you should be looking for a Python package compatible with your database. One part that makes database driver installation tricky is the fact that local binaries are sometimes required in order for them to bind properly, which means that various apt packages might need to be installed before pip can get things set up.`}</p>\n    <p>{`In the next few steps, we'll walk through the process of installing a MySQL driver in Superset.`}</p>\n    <h3 {...{\n      \"id\": \"2-install-mysql-driver\"\n    }}>{`2. Install MySQL Driver`}</h3>\n    <p>{`As we are currently running inside of a Docker container via `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`docker compose`}</inlineCode>\n      {`, we cannot simply run `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`pip install mysqlclient`}</inlineCode>\n      {` on our local shell and expect the drivers to be installed within the Docker containers for superset.`}</p>\n    <p>{`In order to address this, the Superset `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`docker compose`}</inlineCode>\n      {` setup comes with a mechanism for you to install packages locally, which will be ignored by Git for the purposes of local development. Please follow these steps:`}</p>\n    <p>{`Create `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`requirements-local.txt`}</inlineCode></p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`# From the repo root...\ntouch ./docker/requirements-local.txt\n`}</code></pre>\n    <p>{`Add the driver selected in step above:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`echo \"mysqlclient\" >> ./docker/requirements-local.txt\n`}</code></pre>\n    <p>{`Rebuild your local image with the new driver baked in:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`docker-compose build --force-rm\n`}</code></pre>\n    <p>{`After the rebuild is complete, which make take a few minutes, relaunch:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`docker-compose up\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"3-connect-to-mysql\"\n    }}>{`3. Connect to MySQL`}</h3>\n    <p>{`Now that you've got a MySQL driver installed locally, you should be able to test it out.`}</p>\n    <p>{`We can now create a Datasource in Superset that can be used to connect to a MySQL instance. Assuming your MySQL instance is running locally and can be accessed via localhost, use the following connection string in “SQL Alchemy URI”, by going to Sources > Databases > + icon (to add a new datasource) in Superset.`}</p>\n    <p>{`For Docker running in Linux:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`mysql://mysqluser:mysqluserpassword@localhost/example?charset=utf8\n`}</code></pre>\n    <p>{`For Docker running in OSX:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`mysql://mysqluser:mysqluserpassword@docker.for.mac.host.internal/example?charset=utf8\n`}</code></pre>\n    <p>{`Then click “Test Connection”, which should give you an “OK” message. If not, please look at your terminal for error messages, and reach out for help.`}</p>\n    <p>{`Click 'Next' to learn how to make your first chart in Superset.`}</p>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}