{"version":3,"sources":["webpack:///./src/pages/docs/installation/caching.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,yNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,WADR,WAGA,sCACE,gBAAO,CACL,KAAQ,wCACR,WAAc,KAFhB,eADF,qFAOE,yBAAgB,CACd,WAAc,KADhB,gBAPF,sBAWE,yBAAgB,CACd,WAAc,KADhB,sBAXF,wDAgBA,8IAEA,sBAEE,iBAAQ,CACN,WAAc,MADhB,iCAGE,gBAAO,CACL,KAAQ,oCACR,WAAc,MAFhB,WAHF,uBASE,yBAAgB,CACd,WAAc,MADhB,oBATF,mDAeA,iBAAQ,CACN,WAAc,MADhB,2BAGE,gBAAO,CACL,KAAQ,qCACR,WAAc,MAFhB,SAHF,oBAUF,4EACA,sRAGE,yBAAgB,CACd,WAAc,KADhB,gBAHF,KAOA,uBAAK,mBAAU,CACX,WAAc,OADb,6NASL,sEACE,gBAAO,CACL,KAAQ,wEACR,WAAc,KAFhB,QADF,mBAMA,gKAEE,yBAAgB,CACd,WAAc,KADhB,uBAFF,eAME,yBAAgB,CACd,WAAc,KADhB,aANF,KAUA,uBAAK,mBAAU,CACX,UAAa,kBACb,WAAc,OAFb,oTAeL,yIAEE,yBAAgB,CACd,WAAc,KADhB,2BAFF,UAMA,iBAAQ,CACN,GAAM,sBADR,sBAGA,qHACA,uBAAK,mBAAU,CACX,WAAc,OADb,4FAOL,8KAEA,kFACA,uBAAK,mBAAU,CACX,UAAa,kBACb,WAAc,OAFb,0oBA0BL,kFACE,yBAAgB,CACd,WAAc,KADhB,mCADF,wDAMA,uBAAK,mBAAU,CACX,WAAc,OADb,yDAIL,qFACE,yBAAgB,CACd,WAAc,KADhB,2BADF,kGAME,yBAAgB,CACd,WAAc,KADhB,eANF,uEAWA,uBAAK,mBAAU,CACX,UAAa,kBACb,WAAc,OAFb,+EAML,+CACA,uBAAK,mBAAU,CACX,WAAc,OADb,8C,uNAQTH,EAAWI,gBAAiB","file":"component---src-pages-docs-installation-caching-mdx-3530ec2bc37ebd25d92a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/max/code/superset/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"caching\"\n    }}>{`Caching`}</h2>\n    <p>{`Superset uses `}\n      <a {...{\n        \"href\": \"https://pythonhosted.org/Flask-Cache/\",\n        \"parentName\": \"p\"\n      }}>{`Flask-Cache`}</a>\n      {` for caching purpose. Configuring\nyour caching backend is as easy as providing a `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`CACHE_CONFIG`}</inlineCode>\n      {`, constant in your `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`superset_config.py`}</inlineCode>\n      {`\nthat complies with the Flask-Cache specifications.`}</p>\n    <p>{`Flask-Cache supports multiple caching backends (Redis, Memcached, SimpleCache (in-memory), or the\nlocal filesystem).`}</p>\n    <ul>\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Memcached: we recommend using `}\n        <a {...{\n          \"href\": \"https://pypi.org/project/pylibmc/\",\n          \"parentName\": \"li\"\n        }}>{`pylibmc`}</a>\n        {` client library as\n`}\n        <inlineCode {...{\n          \"parentName\": \"li\"\n        }}>{`python-memcached`}</inlineCode>\n        {` does not handle storing binary data correctly.`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ul\"\n      }}>{`Redis: we recommend the `}\n        <a {...{\n          \"href\": \"https://pypi.python.org/pypi/redis\",\n          \"parentName\": \"li\"\n        }}>{`redis`}</a>\n        {` Python package`}</li>\n\n    </ul>\n    <p>{`Both of these libraries can be installed using pip.`}</p>\n    <p>{`For setting your timeouts, this is done in the Superset metadata and goes up the “timeout\nsearchpath”, from your slice configuration, to your data source’s configuration, to your database’s\nand ultimately falls back into your global default defined in `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`CACHE_CONFIG`}</inlineCode>\n      {`.`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`CACHE_CONFIG = {\n    'CACHE_TYPE': 'redis',\n    'CACHE_DEFAULT_TIMEOUT': 60 * 60 * 24, # 1 day default (in secs)\n    'CACHE_KEY_PREFIX': 'superset_results',\n    'CACHE_REDIS_URL': 'redis://localhost:6379/0',\n}\n`}</code></pre>\n    <p>{`Custom cache backends are also supported. See `}\n      <a {...{\n        \"href\": \"https://flask-caching.readthedocs.io/en/latest/#custom-cache-backends\",\n        \"parentName\": \"p\"\n      }}>{`here`}</a>\n      {` for specifics.`}</p>\n    <p>{`Superset has a Celery task that will periodically warm up the cache based on different strategies.\nTo use it, add the following to the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`CELERYBEAT_SCHEDULE`}</inlineCode>\n      {` section in `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`config.py`}</inlineCode>\n      {`:`}</p>\n    <pre><code {...{\n        \"className\": \"language-python\",\n        \"parentName\": \"pre\"\n      }}>{`CELERYBEAT_SCHEDULE = {\n    'cache-warmup-hourly': {\n        'task': 'cache-warmup',\n        'schedule': crontab(minute=0, hour='*'),  # hourly\n        'kwargs': {\n            'strategy_name': 'top_n_dashboards',\n            'top_n': 5,\n            'since': '7 days ago',\n        },\n    },\n}\n`}</code></pre>\n    <p>{`This will cache all the charts in the top 5 most popular dashboards every hour. For other\nstrategies, check the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`superset/tasks/cache.py`}</inlineCode>\n      {` file.`}</p>\n    <h3 {...{\n      \"id\": \"caching-thumbnails\"\n    }}>{`Caching Thumbnails`}</h3>\n    <p>{`This is an optional feature that can be turned on by activating it’s feature flag on config:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`FEATURE_FLAGS = {\n    \"THUMBNAILS\": True,\n    \"THUMBNAILS_SQLA_LISTENERS\": True,\n}\n`}</code></pre>\n    <p>{`For this feature you will need a cache system and celery workers. All thumbnails are store on cache\nand are processed asynchronously by the workers.`}</p>\n    <p>{`An example config where images are stored on S3 could be:`}</p>\n    <pre><code {...{\n        \"className\": \"language-python\",\n        \"parentName\": \"pre\"\n      }}>{`from flask import Flask\nfrom s3cache.s3cache import S3Cache\n\n...\n\nclass CeleryConfig(object):\n    BROKER_URL = \"redis://localhost:6379/0\"\n    CELERY_IMPORTS = (\"superset.sql_lab\", \"superset.tasks\", \"superset.tasks.thumbnails\")\n    CELERY_RESULT_BACKEND = \"redis://localhost:6379/0\"\n    CELERYD_PREFETCH_MULTIPLIER = 10\n    CELERY_ACKS_LATE = True\n\n\nCELERY_CONFIG = CeleryConfig\n\ndef init_thumbnail_cache(app: Flask) -> S3Cache:\n    return S3Cache(\"bucket_name\", 'thumbs_cache/')\n\n\nTHUMBNAIL_CACHE_CONFIG = init_thumbnail_cache\n# Async selenium thumbnail task will use the following user\nTHUMBNAIL_SELENIUM_USER = \"Admin\"\n`}</code></pre>\n    <p>{`Using the above example cache keys for dashboards will be `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`superset_thumb__dashboard__{ID}`}</inlineCode>\n      {`. You can\noverride the base URL for selenium using:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`WEBDRIVER_BASEURL = \"https://superset.company.com\"\n`}</code></pre>\n    <p>{`Additional selenium web drive configuration can be set using `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`WEBDRIVER_CONFIGURATION`}</inlineCode>\n      {`. You can\nimplement a custom function to authenticate selenium. The default function uses the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`flask-login`}</inlineCode>\n      {`\nsession cookie. Here's an example of a custom function signature:`}</p>\n    <pre><code {...{\n        \"className\": \"language-python\",\n        \"parentName\": \"pre\"\n      }}>{`def auth_driver(driver: WebDriver, user: \"User\") -> WebDriver:\n    pass\n`}</code></pre>\n    <p>{`Then on configuration:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`WEBDRIVER_AUTH_FUNC = auth_driver\n`}</code></pre>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}