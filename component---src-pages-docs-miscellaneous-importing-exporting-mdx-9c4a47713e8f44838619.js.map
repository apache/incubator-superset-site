{"version":3,"sources":["webpack:///./src/pages/docs/Miscellaneous/importing-exporting.mdx"],"names":["_frontmatter","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,sOAE5B,IAKMC,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeI,EAAf,CAAsBD,WAAYA,EAAYE,QAAQ,cAC3D,iBAAQ,CACN,GAAM,uCADR,uCAGA,gOAEA,uBAAK,mBAAU,CACX,WAAc,OADb,kpBA6BL,iBAAQ,CACN,GAAM,iCADR,iCAGA,qFACA,uBAAK,mBAAU,CACX,WAAc,OADb,kCAIL,gEACA,uBAAK,mBAAU,CACX,WAAc,OADb,gDAIL,+NAEA,gFACA,sBAEE,iBAAQ,CACN,WAAc,MADhB,QAGE,qBAAY,CACV,WAAc,MADhB,wBAHF,yEAQE,qBAAY,CACV,WAAc,MADhB,UARF,4BAYE,qBAAY,CACV,WAAc,MADhB,kBAZF,kBAgBE,qBAAY,CACV,WAAc,MADhB,qBAhBF,sBAuBA,iBAAQ,CACN,WAAc,MADhB,8CAKA,iBAAQ,CACN,WAAc,MADhB,SAGE,qBAAY,CACV,WAAc,MADhB,qBAHF,YASA,iBAAQ,CACN,WAAc,MADhB,mOAOF,8CACE,qBAAY,CACV,WAAc,KADhB,iCADF,8CAKA,uBAAK,mBAAU,CACX,WAAc,OADb,wCAIL,uDACE,yBAAgB,CACd,WAAc,KADhB,MADF,qCAKA,iBAAQ,CACN,GAAM,mCADR,mCAGA,iFACA,uBAAK,mBAAU,CACX,WAAc,OADb,wDAIL,mEACE,qBAAY,CACV,WAAc,KADhB,QADF,OAKE,qBAAY,CACV,WAAc,KADhB,OALF,oGAUA,uBAAK,mBAAU,CACX,WAAc,OADb,+CAIL,sCACE,qBAAY,CACV,WAAc,KADhB,MADF,qJAMA,uBAAK,mBAAU,CACX,WAAc,OADb,0EAIL,gGACE,yBAAgB,CACd,WAAc,KADhB,oBADF,2LAOA,2DACE,qBAAY,CACV,WAAc,KADhB,MADF,kOAOE,qBAAY,CACV,WAAc,KADhB,sBAPF,aAWA,uBAAK,mBAAU,CACX,WAAc,OADb,gK,oOAcTH,EAAWI,gBAAiB","file":"component---src-pages-docs-miscellaneous-importing-exporting-mdx-9c4a47713e8f44838619.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/max/code/superset2/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"importing-and-exporting-datasources\"\n    }}>{`Importing and Exporting Datasources`}</h2>\n    <p>{`The superset cli allows you to import and export datasources from and to YAML. Datasources include\nboth databases and druid clusters. The data is expected to be organized in the following hierarchy:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`├──databases\n|  ├──database_1\n|  |  ├──table_1\n|  |  |  ├──columns\n|  |  |  |  ├──column_1\n|  |  |  |  ├──column_2\n|  |  |  |  └──... (more columns)\n|  |  |  └──metrics\n|  |  |     ├──metric_1\n|  |  |     ├──metric_2\n|  |  |     └──... (more metrics)\n|  |  └── ... (more tables)\n|  └── ... (more databases)\n└──druid_clusters\n   ├──cluster_1\n   |  ├──datasource_1\n   |  |  ├──columns\n   |  |  |  ├──column_1\n   |  |  |  ├──column_2\n   |  |  |  └──... (more columns)\n   |  |  └──metrics\n   |  |     ├──metric_1\n   |  |     ├──metric_2\n   |  |     └──... (more metrics)\n   |  └── ... (more datasources)\n   └── ... (more clusters)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"exporting-datasources-to-yaml\"\n    }}>{`Exporting Datasources to YAML`}</h3>\n    <p>{`You can print your current datasources to stdout by running:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`superset export_datasources\n`}</code></pre>\n    <p>{`To save your datasources to a file run:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`superset export_datasources -f <filename>\n`}</code></pre>\n    <p>{`By default, default (null) values will be omitted. Use the -d flag to include them. If you want back\nreferences to be included (e.g. a column to include the table id it belongs to) use the -b flag.`}</p>\n    <p>{`Alternatively, you can export datasources using the UI:`}</p>\n    <ol>\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`Open `}\n        <strong {...{\n          \"parentName\": \"li\"\n        }}>{`Sources -> Databases`}</strong>\n        {` to export all tables associated to a single or multiple databases.\n(`}\n        <strong {...{\n          \"parentName\": \"li\"\n        }}>{`Tables`}</strong>\n        {` for one or more tables, `}\n        <strong {...{\n          \"parentName\": \"li\"\n        }}>{`Druid Clusters`}</strong>\n        {` for clusters, `}\n        <strong {...{\n          \"parentName\": \"li\"\n        }}>{`Druid Datasources`}</strong>\n        {` for\ndatasources)`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`Select the items you would like to export.`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`Click `}\n        <strong {...{\n          \"parentName\": \"li\"\n        }}>{`Actions -> Export`}</strong>\n        {` to YAML`}</li>\n\n\n      <li {...{\n        \"parentName\": \"ol\"\n      }}>{`If you want to import an item that you exported through the UI, you will need to nest it inside\nits parent element, e.g. a database needs to be nested under databases a table needs to be nested\ninside a database element.`}</li>\n\n    </ol>\n    <p>{`In order to obtain an `}\n      <strong {...{\n        \"parentName\": \"p\"\n      }}>{`exhaustive list of all fields`}</strong>\n      {` you can import using the YAML import run:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`superset export_datasource_schema\n`}</code></pre>\n    <p>{`As a reminder, you can use the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`-b`}</inlineCode>\n      {` flag to include back references.`}</p>\n    <h3 {...{\n      \"id\": \"importing-datasources-from-yaml\"\n    }}>{`Importing Datasources from YAML`}</h3>\n    <p>{`In order to import datasources from a YAML file(s), run:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`superset import_datasources -p <path or filename>\n`}</code></pre>\n    <p>{`If you supply a path all files ending with `}\n      <strong {...{\n        \"parentName\": \"p\"\n      }}>{`yaml`}</strong>\n      {` or `}\n      <strong {...{\n        \"parentName\": \"p\"\n      }}>{`yml`}</strong>\n      {` will be parsed. You can apply\nadditional flags (e.g. to search the supplied path recursively):`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`superset import_datasources -p <path> -r\n`}</code></pre>\n    <p>{`The sync flag `}\n      <strong {...{\n        \"parentName\": \"p\"\n      }}>{`-s`}</strong>\n      {` takes parameters in order to sync the supplied elements with your file. Be\ncareful this can delete the contents of your meta database. Example:`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`superset import_datasources -p <path / filename> -s columns,metrics\n`}</code></pre>\n    <p>{`This will sync all metrics and columns for all datasources found in the `}\n      <inlineCode {...{\n        \"parentName\": \"p\"\n      }}>{`<path /filename>`}</inlineCode>\n      {` in the\nSuperset meta database. This means columns and metrics not specified in YAML will be deleted. If you\nwould add tables to columns,metrics those would be synchronised as well.`}</p>\n    <p>{`If you don’t supply the sync flag (`}\n      <strong {...{\n        \"parentName\": \"p\"\n      }}>{`-s`}</strong>\n      {`) importing will only add and update (override) fields.\nE.g. you can add a verbose_name to the column ds in the table random_time_series from the example\ndatasets by saving the following YAML to file and then running the `}\n      <strong {...{\n        \"parentName\": \"p\"\n      }}>{`import_datasources`}</strong>\n      {` command.`}</p>\n    <pre><code {...{\n        \"parentName\": \"pre\"\n      }}>{`databases:\n- database_name: main\n  tables:\n  - table_name: random_time_series\n    columns:\n    - column_name: ds\n      verbose_name: datetime\n`}</code></pre>\n\n  </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}